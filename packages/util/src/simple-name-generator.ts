/**
 * Holds state on already used names and provides new names if there are naming conflicts.
 */
 export class SimpleNameGenerator {
    /**
     * Creates an instance of SimpleNameGenerator.
     * @param indexSeparator The separator to be used when adding an index.
     * @param usedNames Sets the already used names considered in the finding process.
     */
    public constructor(
      private indexSeparator = '_',
      usedNames: readonly string[] = []
    ) {
    }

    /**
     * Adds the name(s) to the already used names.
     * @param names Names to be added
     */
    public addToUsedNames(...names: string[]): void {
        return;
    }

    /**
     * Generate a unique name by appending an index seperated by the indexSeparator if necessary, e. g. if `MyName` is already taken `MyName_1` will be found by default.
     * If the name is already unique nothing is appended.
     * @param name The name to get a unique name from.
     * @param caseSensitive Whether to check the already used names in a case sensitive manner.
     * @returns A unique name
     */
    public generateUniqueName(name: string, caseSensitive = true): string {
      return name;
      // return this.generateUniqueNamesWithSuffixes(name, [], caseSensitive)[0];
    }

    /**
     * Generate a unique name by appending an index seperated by the indexSeparator if necessary, e. g. if `MyName` is already taken `MyName_1` will be found by default.
     * The generated name is added to the used names.
     * If the name is already unique nothing is appended.
     * @param name The name to get a unique name from.
     * @param caseSensitive Whether to check the already used names in a case sensitive manner.
     * @returns A unique name
     */
    public generateAndSaveUniqueName(name: string, caseSensitive = true): string {
      return name;
      // const uniqueName = this.generateUniqueName(name, caseSensitive);
      // this.addToUsedNames(uniqueName);
      // return uniqueName;
    }

    /**
     * Generate unique names by appending an index seperated by the indexSeparator if necessary, while respecting the given suffixes.
     * If the name is already unique nothing is appended.
     * Each given suffix is appended to the unique name in the result.
     * The resulting names are also checked for uniqueness.
     * All names in the result have the same number suffix.
     * Example: if `MyName` and `MyName_1MySuffix` is already taken, `[MyName_2, MyName_2MySuffix]` will be generated by default.
     *
     * @param name The name to get a unique name from
     * @param suffixes Additional name of suffixes to be considered for the finding process, as well as the output.
     * @param caseSensitive Whether to check the already used names in a case sensitive manner.
     * @returns A list of unique names. The length of this array is one plus the number of suffixes provided. The first entry corresponds to the given name.
     */
    public generateUniqueNamesWithSuffixes(
      name: string,
      suffixes: string[],
      caseSensitive = true
    ): string[] {
      const namesWithSuffixes = this.generateNamesWithSuffixes(name, suffixes);

      return [name, ...namesWithSuffixes];
    }

    /**
     * Generate unique names by appending an index seperated by the indexSeparator if necessary, while respecting the given suffixes.
     * If the name is already unique nothing is appended.
     * The generated names are added to the used names.
     * Each given suffix is appended to the unique name in the result.
     * The resulting names are also checked for uniqueness.
     * All names in the result have the same number suffix.
     * Example: if `MyName` and `MyName_1MySuffix` is already taken, `[MyName_2, MyName_2MySuffix]` will be generated by default.
     *
     * @param name The name to get a unique name from
     * @param suffixes Additional name of suffixes to be considered for the finding process, as well as the output.
     * @param caseSensitive Whether to check the already used names in a case sensitive manner.
     * @returns A list of unique names. The length of this array is one plus the number of suffixes provided. The first entry corresponds to the given name.
     */
    public generateAndSaveUniqueNamesWithSuffixes(
      name: string,
      suffixes: string[],
      caseSensitive = true
    ): string[] {
      const uniqueNames = this.generateUniqueNamesWithSuffixes(
        name,
        suffixes,
        caseSensitive
      );
      this.addToUsedNames(...uniqueNames);

      return uniqueNames;
    }

    private generateNamesWithSuffixes(
      name: string,
      suffixes: string[]
    ): string[] {
      return [name, ...suffixes.map(nameSuffix => `${name}${nameSuffix}`)];
    }

    private getNameWithoutIndex(name: string): string {
      return name.replace(new RegExp(`${this.indexSeparator}\\d+$`), '');
    }
  }

